RequireJS Introduction

What is it?
It is a library to dynamically load JavaScript files, or modules, or libraries. 
It is based on a concept called Asynchronous Module Definition - AMD. 

Why is it required?
To develop a maintainable, and scalable software, the code is typically organized into different JavaScript files.
When the files depend on each other, they need to be referred in the required dependency order in a .html file, using script tags.
The complexity becomes obvious as the project scope expands, which generally results in increased number of JavaScript files.
RequireJS elegantly manages dependencies, and aids in developing loosely coupled JavaScript modules.

How to implement it?
Step 1: 
Starting JavaScript file of the application has to be within "require" clause.
This can look like below:

require('mainModuleName', ['dependency1ModuleName'], function(){	
	return{
		init: function(){
			//some code
		}
	}
});

The "require" function takes below parameters:
1. An optional module name, default being the name of the JavaScript file
2. An array of depencencies
3. A dynamic function that can return a JavaScript object literal or perform some task

Step 2: 
Other files have to have a "define" clause, within which logic needs to be written.
The dependencies generally return JavaScript object literals, like shown below:

define('dependency1ModuleName', [], function(){
	return{
		method1: function(){
			//some code
		},
		method2: function(){
			//some code
		},
		method3: function(){
			//some code
		}
	}
});

Step 3: 
Next major step is to define a configuration like config.js.

1. The first part of configuration calls a "requirejs.config" method. 
This takes an object with following properties:
1.1. baseUrl - JavaScript folder name
1.2. paths - where a name (to specify an external library) like 'jquery', and its relative path inside a specified "baseUrl"
1.3. shim - this is an object, that has a property for each dependant module and its array of dependencies. This ensures the files are loaded in the specified order of depedency.

2.The second part calls the "require" method. 
It takes below parameters:
2.1. An array of depedency where mainModuleName can be passed
2.2. A dynamic function that takes mainModuleName object and calls method(s) of this object that need to run on load of the .html file.

This can look like below:

requirejs.config({
    baseUrl: 'JS',
    paths: {
        // the left side is the module ID,
        // the right side is the path to
        // the jQuery file, relative to baseUrl.
        // Also, the path should NOT include
        // the '.js' file extension. This example
        // is using jQuery 1.9.0 located at
        // js/lib/jquery-1.9.0.js, relative to
        // the HTML page.
        jquery: 'Ref/jquery.min'
    },
    shim:{
      "script":["jquery", "dependency1ModuleName", "Cost"],
      "Cost":["Product"]
    }
});

require(["mainModuleName"], function(mainModuleName){
    mainModuleName.init();
});

Step 4: 
Finally the .html file needs only one script tag to refer to RequireJS file.
The script tag needs to point to a local, or CDN copy of RequireJS file.
Additionally "data-main" attribute must point to the configuration file defined in the previous step.

This can look like below:

  <script data-main="JS\config" data-require="requirejs@2.3.2" data-semver="2.3.2" src="http://requirejs.org/docs/release/2.3.2/minified/require.js"></script>

Hope this helps you start writing using RequireJS...
Happy coding!
  
Example:
https://github.com/harsha-narahari/RequireSample

Further reading:
http://bit.ly/2jkotOj
http://bit.ly/2jv0Tll
